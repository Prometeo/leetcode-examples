#+OPTIONS: ^:{}

Given an array of integers /nums/ and an inteher /target/, return indices of the two numbers such that they add up to /target/.

You may assume that each input would have *exactly one solution*, and you may not use the same element twice.

You can return the answer in any order.

*** Example 1:
*Input*: nums = [2, 7, 11, 15], target = 9
*Output*: [0,1]
*Explanation*: Because nums[0] + nums[1] == 9, we return [0, 1].

*** Example 2:
*Input*: nums = [3, 2, 4], target = 6
*Output*: [1,2]

*** Example 3:
*Input*: nums = [3, 3], target = 6
*Output*: [0,1]

*** Constraints:
+ 2 <= nums.length <= 10^{4}
+ -10 <= nums[i] <= 10^{9}
+ -10 <= target <= 10^{9}
+ *Only one valid answer exists*.


** Aproaches

*** Iterate the list
Iterate the list and get the result of target - value and validate if the result is in the list if it is return both indices

*** Iterate the list and create hashmap
Initialize an empty hash map and iterate the list with enumerate, make the operation target - v if the result is in hashmap return the current key given by the enumerate function and the value of the hash_{}_map, if not add the current value as key to the hash map and the index as value to the hash_map
